---
- name: Install MySQL, Redis, and Docker Swarm on EC2
  hosts: ec2_instance
  become: yes
  vars:
    mysql_root_password: "StrongPass123!"
    
  tasks:
    - name: Update package cache (Amazon Linux)
      dnf:
        update_cache: yes
      when: ansible_os_family == "RedHat"
      
    - name: Update package cache (Debian/Ubuntu)
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

    # MySQL Installation
    - name: Download MySQL repository RPM using wget (Amazon Linux)
      command: wget -O /tmp/mysql80-community-release-el9-1.noarch.rpm https://dev.mysql.com/get/mysql80-community-release-el9-1.noarch.rpm
      args:
        creates: /tmp/mysql80-community-release-el9-1.noarch.rpm
      when: ansible_os_family == "RedHat"

    - name: Install MySQL repository (Amazon Linux)
      dnf:
        name: /tmp/mysql80-community-release-el9-1.noarch.rpm
        state: present
        disable_gpg_check: yes
      when: ansible_os_family == "RedHat"

    - name: Import MySQL public key (Amazon Linux)
      rpm_key:
        key: https://repo.mysql.com/RPM-GPG-KEY-mysql-2023
        state: present
      when: ansible_os_family == "RedHat"

    - name: Install MySQL server (Amazon Linux)
      dnf:
        name: mysql-community-server
        state: present
      when: ansible_os_family == "RedHat"

    - name: Install MySQL client (Amazon Linux)
      dnf:
        name: mysql-community-client
        state: present
      when: ansible_os_family == "RedHat"
      
    - name: Install Python pip (Amazon Linux)
      dnf:
        name: python3-pip
        state: present
      when: ansible_os_family == "RedHat"
      
    - name: Install PyMySQL via pip (Amazon Linux)
      pip:
        name: PyMySQL
        executable: pip3
      when: ansible_os_family == "RedHat"
      
    - name: Install MySQL server (Ubuntu/Debian)
      apt:
        name:
          - mysql-server
          - mysql-client
          - python3-pymysql
        state: present
      when: ansible_os_family == "Debian"

    - name: Start and enable MySQL service (Amazon Linux)
      systemd:
        name: mysqld
        state: started
        enabled: yes
      when: ansible_os_family == "RedHat"
        
    - name: Start and enable MySQL service (Debian)
      systemd:
        name: mysql
        state: started
        enabled: yes
      when: ansible_os_family == "Debian"

    - name: Get temporary MySQL root password (Amazon Linux)
      shell: grep 'temporary password' /var/log/mysqld.log | awk '{print $NF}' | tail -1
      register: mysql_temp_password
      when: ansible_os_family == "RedHat"
      ignore_errors: yes

    - name: Set MySQL root password (Amazon Linux)
      shell: |
        mysql -uroot -p'{{ mysql_temp_password.stdout }}' --connect-expired-password -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '{{ mysql_root_password }}';"
      when: 
        - ansible_os_family == "RedHat"
        - mysql_temp_password.stdout != ""
      ignore_errors: yes
      
    - name: Set MySQL root password (Debian)
      mysql_user:
        name: root
        password: "{{ mysql_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
        state: present
      when: ansible_os_family == "Debian"

    - name: Create MySQL configuration for root
      template:
        src: my.cnf.j2
        dest: /root/.my.cnf
        owner: root
        group: root
        mode: '0600'

    # Redis Installation
    - name: Install Redis (Amazon Linux 2023)
      dnf:
        name: redis6
        state: present
      when: ansible_os_family == "RedHat"
      
    - name: Install Redis (Ubuntu/Debian)
      apt:
        name: redis-server
        state: present
      when: ansible_os_family == "Debian"

    - name: Configure Redis to bind to all interfaces (Amazon Linux)
      lineinfile:
        path: /etc/redis6/redis6.conf
        regexp: '^bind 127\.0\.0\.1'
        line: 'bind 0.0.0.0'
        backup: yes
      when: ansible_os_family == "RedHat"
      notify: restart redis
      
    - name: Configure Redis to bind to all interfaces (Debian)
      lineinfile:
        path: /etc/redis/redis.conf
        regexp: '^bind 127\.0\.0\.1'
        line: 'bind 0.0.0.0'
        backup: yes
      when: ansible_os_family == "Debian"
      notify: restart redis

    - name: Start and enable Redis service (Amazon Linux)
      systemd:
        name: redis6
        state: started
        enabled: yes
      when: ansible_os_family == "RedHat"
        
    - name: Start and enable Redis service (Debian)
      systemd:
        name: redis-server
        state: started
        enabled: yes
      when: ansible_os_family == "Debian"

    # Docker Installation
    - name: Install Docker (Amazon Linux)
      dnf:
        name: docker
        state: present
      when: ansible_os_family == "RedHat"

    - name: Install prerequisites for Docker (Debian)
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
      when: ansible_os_family == "Debian"

    - name: Add Docker GPG key (Ubuntu/Debian)
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: ansible_os_family == "Debian"

    - name: Add Docker repository (Ubuntu/Debian)
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
      when: ansible_os_family == "Debian"

    - name: Install Docker CE (Debian)
      package:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
      when: ansible_os_family == "Debian"

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add current user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    # Docker Swarm Configuration
    - name: Initialize Docker Swarm on single node
      command: docker swarm init --advertise-addr {{ ansible_default_ipv4.address }}
      register: swarm_init_result
      ignore_errors: yes

    - name: Display Docker Swarm status
      command: docker node ls
      register: swarm_status

    - name: Show Docker Swarm nodes
      debug:
        msg: "{{ swarm_status.stdout_lines }}"

  handlers:
    - name: restart redis
      systemd:
        name: redis6
        state: restarted
